/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { bookDelete } from '../fn/operations/book-delete';
import { BookDelete$Params } from '../fn/operations/book-delete';
import { bookHead } from '../fn/operations/book-head';
import { BookHead$Params } from '../fn/operations/book-head';
import { bookOptions } from '../fn/operations/book-options';
import { BookOptions$Params } from '../fn/operations/book-options';
import { bookPatch } from '../fn/operations/book-patch';
import { BookPatch$Params } from '../fn/operations/book-patch';
import { bookPut } from '../fn/operations/book-put';
import { BookPut$Params } from '../fn/operations/book-put';
import { bookTrace } from '../fn/operations/book-trace';
import { BookTrace$Params } from '../fn/operations/book-trace';

@Injectable({ providedIn: 'root' })
export class ApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `bookPut()` */
  static readonly BookPutPath = '/book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookPut()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookPut$Response(params?: BookPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return bookPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookPut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookPut(params?: BookPut$Params, context?: HttpContext): Observable<void> {
    return this.bookPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `bookDelete()` */
  static readonly BookDeletePath = '/book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookDelete$Response(params?: BookDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return bookDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookDelete(params?: BookDelete$Params, context?: HttpContext): Observable<void> {
    return this.bookDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `bookOptions()` */
  static readonly BookOptionsPath = '/book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookOptions()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookOptions$Response(params?: BookOptions$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return bookOptions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookOptions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookOptions(params?: BookOptions$Params, context?: HttpContext): Observable<void> {
    return this.bookOptions$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `bookHead()` */
  static readonly BookHeadPath = '/book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookHead()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookHead$Response(params?: BookHead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return bookHead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookHead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookHead(params?: BookHead$Params, context?: HttpContext): Observable<void> {
    return this.bookHead$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `bookPatch()` */
  static readonly BookPatchPath = '/book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookPatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookPatch$Response(params?: BookPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return bookPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookPatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookPatch(params?: BookPatch$Params, context?: HttpContext): Observable<void> {
    return this.bookPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `bookTrace()` */
  static readonly BookTracePath = '/book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookTrace()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookTrace$Response(params?: BookTrace$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return bookTrace(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookTrace$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookTrace(params?: BookTrace$Params, context?: HttpContext): Observable<void> {
    return this.bookTrace$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
